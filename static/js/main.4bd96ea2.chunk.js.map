{"version":3,"sources":["lib/steamDataCollectors.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","submitSteamId","steamId","a","url","axios","get","rawGameData","data","games","getGameAchievements","gameId","rawAchievementData","achievements","STEAM_ID","App","className","type","onClick","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAKMA,EAAW,kDAEJC,EAAa,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACrBC,EADqB,UACZJ,EADY,wBACYE,GADZ,SAEiBG,IAAMC,IAAIF,GAF3B,cAErBG,EAFqB,yBAIpBA,EAAYC,KAAKC,OAJG,2CAAH,sDAObC,EAAmB,uCAAG,WACjCR,EACAS,GAFiC,iBAAAR,EAAA,6DAI3BC,EAJ2B,UAIlBJ,EAJkB,+BAIaE,EAJb,iBAI6BS,GAJ7B,SAKyBN,IAAMC,IAAIF,GALnC,cAK3BQ,EAL2B,yBAO1BA,EAAmBJ,KAAKK,cAPE,2CAAH,wD,OCV1BC,EAAW,oBAkBFC,EAhBC,kBACd,sBAAKC,UAAU,MAAf,UACE,8CACA,wBAAQC,KAAK,SAAS,aAAW,YAAYC,QAAS,kBAAMjB,EAAca,IAA1E,iBAGA,wBACEG,KAAK,SACL,aAAW,mBACXC,QAAS,kBAAMR,EAAoBI,EAAU,SAH/C,uBCIWK,EAdS,SAACC,GACnBA,GACF,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4bd96ea2.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n  AchievementData, GameData, GetAchievementsResponse, GetGamesResponse,\n} from '../types';\n\nconst BASE_URL = 'https://steam-achievements-server.herokuapp.com';\n\nexport const submitSteamId = async (steamId: string): Promise<GameData[]> => {\n  const url = `${BASE_URL}/gameDetails/${steamId}`;\n  const rawGameData: GetGamesResponse = await axios.get(url);\n\n  return rawGameData.data.games;\n};\n\nexport const getGameAchievements = async (\n  steamId: string,\n  gameId: string,\n): Promise<AchievementData[]> => {\n  const url = `${BASE_URL}/achievementDetails/${steamId}/game/${gameId}`;\n  const rawAchievementData: GetAchievementsResponse = await axios.get(url);\n\n  return rawAchievementData.data.achievements;\n};\n","import React, { FC } from 'react';\nimport './App.css';\nimport { getGameAchievements, submitSteamId } from './lib/steamDataCollectors';\n\nconst STEAM_ID = '76561198052061156';\n\nconst App: FC = () => (\n  <div className=\"App\">\n    <h1>Hello, World</h1>\n    <button type=\"button\" aria-label=\"submit id\" onClick={() => submitSteamId(STEAM_ID)}>\n      Hi!\n    </button>\n    <button\n      type=\"button\"\n      aria-label=\"get achievements\"\n      onClick={() => getGameAchievements(STEAM_ID, '8930')}\n    >\n      Civ 5\n    </button>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}