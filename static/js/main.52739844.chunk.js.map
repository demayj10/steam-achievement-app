{"version":3,"sources":["app/hooks.ts","lib/steamDataCollectors.ts","AppSlice.tsx","components/SubmissionScreen/SubmissionScreen.tsx","components/GameCard/GameCard.tsx","components/GamesCollection/GamesCollection.tsx","components/ErrorScreen/ErrorScreen.tsx","components/Navbar/Navbar.tsx","components/LoadingScreen/LoadingScreen.tsx","components/HomeScreen/HomeScreen.tsx","components/AchievementCard/AchievementCard.tsx","components/SingleGameScreen/SingleGameScreen.tsx","lib/helpers.ts","components/Footer/Footer.tsx","App.tsx","reportWebVitals.ts","app/store.tsx","theme.ts","index.tsx"],"names":["useAppSelector","useSelector","BASE_URL","submitSteamId","steamId","a","url","axios","get","rawGameData","uniqueIds","Set","uniqueGames","data","forEach","game","has","appid","add","push","getGameAchievements","gameId","rawAchievementData","fetchGames","createAsyncThunk","gameData","games","fetchAchievements","achievementData","appSlice","createSlice","name","initialState","groups","loadedAchievements","appStatus","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","payload","concat","rejected","selectAllGames","app","selectLoadedAchievements","selectAppStatus","selectSteamId","SubmissionScreen","dispatch","useDispatch","useState","setSteamId","Paper","id","Typography","variant","TextField","label","onChange","e","target","value","Button","type","onClick","GameCard","props","headerImage","navigate","useNavigate","Card","className","elevation","CardActionArea","CardMedia","component","image","alt","CardContent","GamesCollection","map","ErrorScreen","Navbar","navTitle","AppBar","position","Toolbar","IconButton","size","edge","color","LoadingScreen","CircularProgress","thickness","HomeScreen","content","AchievementCard","displayName","description","icon","iconGray","achieved","height","SingleGameScreen","useParams","undefined","currentGame","find","selectGameById","achievements","rawText","temp","document","createElement","innerHTML","textContent","cleanTextContent","detailedDescription","src","achievement","apiName","unlockTime","Footer","CoreApp","path","element","App","basename","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","appReducer","store","configureStore","reducer","devTools","process","theme","createTheme","palette","primary","main","info","rootElement","getElementById","ReactDOM","render","StrictMode","ThemeProvider"],"mappings":"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","file":"static/js/main.52739844.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from './store';\n\n// Use throughout the app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): AppDispatch => useDispatch();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from 'axios';\nimport {\n  AchievementData, GameData, GetAchievementsResponse, GetGamesResponse,\n} from '../types';\n\nconst BASE_URL = 'https://steam-achievements-server.herokuapp.com';\n\nexport const submitSteamId = async (steamId: string): Promise<GameData[]> => {\n  const url = `${BASE_URL}/gameDetails/${steamId}`;\n  const rawGameData: GetGamesResponse = await axios.get(url);\n  const uniqueIds = new Set<string>();\n  const uniqueGames: GameData[] = [];\n\n  rawGameData.data.forEach((game) => {\n    if (!uniqueIds.has(game.appid)) {\n      uniqueIds.add(game.appid);\n      uniqueGames.push(game);\n    }\n  });\n\n  return uniqueGames;\n};\n\nexport const getGameAchievements = async (\n  steamId: string,\n  gameId: string,\n): Promise<AchievementData[]> => {\n  const url = `${BASE_URL}/achievementDetails/${steamId}/game/${gameId}`;\n\n  const rawAchievementData: GetAchievementsResponse = await axios.get(url);\n\n  return rawAchievementData.data;\n};\n","import {\n  createAsyncThunk,\n  createSlice,\n  Slice,\n} from '@reduxjs/toolkit';\nimport {\n  AchievementData, AppState, GameData, StatusType,\n} from './types';\nimport { getGameAchievements, submitSteamId } from './lib/steamDataCollectors';\nimport { RootState } from './app/store';\n\nconst initialState: AppState = {\n  steamId: '',\n  games: [],\n  groups: [],\n  loadedAchievements: [],\n  appStatus: 'idle',\n  error: null,\n};\n\nconst fetchGames = createAsyncThunk(\n  'games/fetchGames',\n  async (steamId: string): Promise<{ steamId: string, games: GameData[]}> => {\n    const gameData = await submitSteamId(steamId);\n    return { steamId, games: gameData };\n  },\n);\n\nconst fetchAchievements = createAsyncThunk(\n  'game/fetchAchievements',\n  async ({ steamId, gameId }: {steamId: string, gameId: string}): Promise<AchievementData[]> => {\n    const achievementData = await getGameAchievements(steamId, gameId);\n    return achievementData as AchievementData[];\n  },\n);\n\nconst appSlice: Slice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchGames.pending, (state: AppState) => (\n        { ...state, appStatus: 'pending' }\n      ))\n      .addCase(fetchGames.fulfilled, (state: AppState, { payload }) => (\n        {\n          ...state,\n          appStatus: 'fulfilled',\n          steamId: payload.steamId,\n          games: state.games.concat(payload.games),\n        }\n      )).addCase(fetchGames.rejected, (state: AppState) => (\n        { ...state, appStatus: 'rejected' }\n      ))\n      .addCase(fetchAchievements.pending, (state: AppState) => (\n        { ...state, appStatus: 'pending' }\n      ))\n      .addCase(fetchAchievements.fulfilled, (state: AppState, { payload }) => (\n        {\n          ...state,\n          appStatus: 'fulfilled',\n          loadedAchievements: payload,\n        }\n      ))\n      .addCase(fetchAchievements.rejected, (state: AppState) => (\n        { ...state, appStatus: 'rejected' }\n      ));\n  },\n});\n\nexport default appSlice.reducer;\n\nexport { fetchGames, fetchAchievements };\n\nexport const selectAllGames = (state: RootState): GameData[] => state.app.games;\nexport const selectGameById = (state: RootState, gameId: string): GameData => (\n  state.app.games.find((game: GameData) => game.appid === gameId)\n);\nexport const selectLoadedAchievements = (state: RootState): AchievementData[] => (\n  state.app.loadedAchievements\n);\nexport const selectAppStatus = (state: RootState): StatusType => state.app.appStatus;\nexport const selectSteamId = (state: RootState): string => state.app.steamId;\n","import React, { BaseSyntheticEvent, FC, useState } from 'react';\nimport {\n  Button, Paper, TextField, Typography,\n} from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { fetchGames } from '../../AppSlice';\nimport './SubmissionScreen.css';\n\nexport const SubmissionScreen: FC = () => {\n  const dispatch = useDispatch();\n  const [steamId, setSteamId] = useState('');\n\n  const handleSubmitSteamId = () => {\n    dispatch(fetchGames(steamId));\n    setSteamId('');\n  };\n\n  return (\n    <Paper id=\"submission-container\">\n      <div id=\"submission-header\">\n        <Typography variant=\"h3\">Enter your Steam Id below to get started</Typography>\n      </div>\n      <div id=\"submission-content\">\n        <TextField\n          label=\"Steam ID\"\n          variant=\"outlined\"\n          onChange={(e: BaseSyntheticEvent) => setSteamId(e.target.value)}\n        />\n        <Button type=\"submit\" variant=\"contained\" onClick={() => handleSubmitSteamId()}>\n          Submit\n        </Button>\n      </div>\n\n    </Paper>\n  );\n};\n","import React, { FC } from 'react';\nimport './GameCard.css';\nimport {\n  Card, CardActionArea, CardContent, CardMedia, Typography,\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport {\n  fetchAchievements, selectSteamId,\n} from '../../AppSlice';\n\ninterface GameCardProps {\n    id: string,\n    name: string,\n    headerImage: string,\n}\n\nexport const GameCard: FC<GameCardProps> = (props) => {\n  const { id, name, headerImage } = props;\n  const steamId = useAppSelector(selectSteamId);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const handleGameSelect = () => {\n    navigate(`game/${id}`);\n    dispatch(fetchAchievements({ steamId, gameId: id }));\n  };\n\n  return (\n    <Card className=\"game-card\" elevation={10}>\n      <CardActionArea onClick={() => handleGameSelect()}>\n        <CardMedia\n          component=\"img\"\n          image={headerImage}\n          alt=\"game cover\"\n        />\n        <CardContent>\n          <Typography variant=\"h5\">{name}</Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n","import React, { FC } from 'react';\nimport './GamesCollection.css';\n\nimport { useAppSelector } from '../../app/hooks';\nimport { selectAllGames } from '../../AppSlice';\nimport { GameCard } from '../GameCard/GameCard';\n\nexport const GamesCollection: FC = () => {\n  const games = useAppSelector(selectAllGames);\n\n  return (\n    <div id=\"games-collection-container\">\n      <div id=\"card-container\">\n        {games.map((game) => (\n          <GameCard\n            key={game.appid}\n            id={game.appid}\n            name={game.name}\n            headerImage={game.headerImage}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './ErrorScreen.css';\n\nconst ErrorScreen: FC = () => (\n  <div id=\"error-content\">\n    <h2>Error!</h2>\n    <p>Something strange is a foot</p>\n  </div>\n);\n\nexport default ErrorScreen;\n","import React, { FC } from 'react';\nimport {\n  AppBar, IconButton, Toolbar, Typography,\n} from '@mui/material';\nimport HomeIcon from '@mui/icons-material/Home';\nimport { useNavigate } from 'react-router-dom';\n\ninterface NavbarProps {\n  navTitle: string;\n}\n\nconst Navbar: FC<NavbarProps> = (props) => {\n  const { navTitle } = props;\n  const navigate = useNavigate();\n\n  const handleGoHome = () => {\n    navigate('/');\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton size=\"large\" edge=\"start\" color=\"info\" onClick={() => handleGoHome()}>\n          <HomeIcon />\n        </IconButton>\n        <Typography variant=\"h5\">{navTitle}</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import React, { FC } from 'react';\nimport { CircularProgress } from '@mui/material';\nimport './LoadingScreen.css';\n\nconst LoadingScreen: FC = () => (\n  <div>\n    <CircularProgress\n      thickness={3}\n      size={100}\n    />\n  </div>\n);\n\nexport default LoadingScreen;\n","import React, { FC, ReactElement } from 'react';\nimport './HomeScreen.css';\nimport { StatusType } from '../../types';\nimport { useAppSelector } from '../../app/hooks';\nimport { selectAppStatus } from '../../AppSlice';\nimport { SubmissionScreen } from '../SubmissionScreen/SubmissionScreen';\nimport { GamesCollection } from '../GamesCollection/GamesCollection';\nimport ErrorScreen from '../ErrorScreen/ErrorScreen';\nimport Navbar from '../Navbar/Navbar';\nimport LoadingScreen from '../LoadingScreen/LoadingScreen';\n\nconst HomeScreen: FC = () => {\n  const appStatus: StatusType = useAppSelector(selectAppStatus);\n\n  let content: ReactElement | HTMLElement;\n  const navTitle = 'Steam Achievement App';\n\n  if (appStatus === 'idle') {\n    content = <SubmissionScreen />;\n  } else if (appStatus === 'pending') {\n    content = <LoadingScreen />;\n  } else if (appStatus === 'fulfilled') {\n    content = <GamesCollection />;\n  } else {\n    content = <ErrorScreen />;\n  }\n\n  return (\n    <>\n      <Navbar navTitle={navTitle} />\n      <div id=\"app-content\" data-testid=\"app-test\">\n        {content}\n      </div>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { FC } from 'react';\nimport {\n  Card, CardContent, CardMedia, Typography,\n} from '@mui/material';\nimport './AchievementCard.css';\n\ninterface AchievementCardProps {\n    apiName: string,\n    displayName: string,\n    description: string,\n    icon: string,\n    iconGray: string,\n    achieved: boolean,\n    unlockTime: number,\n}\n\nexport const AchievementCard: FC<AchievementCardProps> = (\n  props,\n) => {\n  const {\n    displayName, description, icon, iconGray, achieved,\n  } = props;\n\n  return (\n    <Card elevation={10} className=\"card-body\">\n      <CardMedia className=\"card-image\" component=\"img\" height=\"125\" image={achieved ? icon : iconGray} alt=\"achievement icon\" />\n      <CardContent className=\"card-content\">\n        <Typography variant=\"h6\">{displayName}</Typography>\n        <Typography variant=\"body1\">{description}</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n","import React, { FC } from 'react';\nimport { Typography } from '@mui/material';\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector } from '../../app/hooks';\nimport { selectAppStatus, selectGameById, selectLoadedAchievements } from '../../AppSlice';\nimport { AchievementData, StatusType } from '../../types';\nimport { AchievementCard } from '../AchievementCard/AchievementCard';\nimport './SingleGameScreen.css';\nimport { cleanTextContent } from '../../lib/helpers';\nimport Navbar from '../Navbar/Navbar';\nimport LoadingScreen from '../LoadingScreen/LoadingScreen';\n\ntype GameScreenParams = {\n    gameId: string | undefined,\n}\n\nexport const SingleGameScreen: FC = () => {\n  const appStatus: StatusType = useAppSelector(selectAppStatus);\n  const { gameId }: GameScreenParams = useParams();\n\n  if (gameId === undefined) {\n    return <h2>Where did your game id go?</h2>;\n  }\n\n  const currentGame = useAppSelector((state) => selectGameById(state, gameId));\n  const achievements: AchievementData[] = useAppSelector(selectLoadedAchievements);\n\n  let content;\n  if (appStatus === 'pending') {\n    content = <LoadingScreen />;\n  } else if (appStatus === 'fulfilled') {\n    if (currentGame === undefined) {\n      content = <h2>{'Huh, that\\'s weird, you\\'re not supposed to be here!'}</h2>;\n    } else {\n      const {\n        appid: id, name, headerImage, detailedDescription,\n      } = currentGame;\n\n      const description = cleanTextContent(detailedDescription);\n\n      content = (\n        <div key={id}>\n          <Navbar navTitle={name} />\n          <div id=\"game-cover-image-container\">\n            <img id=\"game-cover-image\" src={headerImage} alt=\"game cover\" />\n          </div>\n          <div id=\"game-content\">\n            <Typography id=\"game-description\" variant=\"body1\">{description}</Typography>\n            <div id=\"achievement-card-container\">\n              {achievements.map((achievement) => (\n                <AchievementCard\n                  key={achievement.apiName}\n                  apiName={achievement.apiName}\n                  displayName={achievement.displayName}\n                  description={achievement.description}\n                  icon={achievement.icon}\n                  iconGray={achievement.iconGray}\n                  achieved={achievement.achieved}\n                  unlockTime={achievement.unlockTime}\n                />\n              ))}\n            </div>\n\n          </div>\n        </div>\n      );\n    }\n  } else {\n    content = <h2>Error!</h2>;\n  }\n\n  return (\n    <div id=\"single-game-content\">\n      {content}\n    </div>\n  );\n};\n","export const cleanTextContent = (rawText: string): string => {\n  const temp = document.createElement('div');\n  temp.innerHTML = rawText;\n  return temp.textContent as string;\n};\n","import React, { FC } from 'react';\nimport './Footer.css';\n\nconst Footer: FC = () => (\n  <div id=\"footer-container\">\n    <p>Hi, my name is john</p>\n    <p>This is an app I made</p>\n  </div>\n);\n\nexport default Footer;\n","import React, { FC } from 'react';\nimport { Routes, Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport HomeScreen from './components/HomeScreen/HomeScreen';\nimport { SingleGameScreen } from './components/SingleGameScreen/SingleGameScreen';\nimport Footer from './components/Footer/Footer';\n\nconst CoreApp: FC = () => (\n  <div className=\"App\">\n    <Routes>\n      <Route path=\"/\" element={<HomeScreen />} />\n      <Route path=\"game/:gameId\" element={<SingleGameScreen />} />\n    </Routes>\n    <Footer />\n  </div>\n);\n\nconst App: FC = () => (\n  <BrowserRouter basename=\"steam-achievement-app\">\n    <CoreApp />\n  </BrowserRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../AppSlice';\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n// export type RootState = ReturnType<typeof store.getState>;\nexport type Reducer = typeof rootReducer;\nexport type RootState = ReturnType<Reducer>\n// Inferred type: {\n//    AppState,\n// }\nexport type Store = typeof store;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { createTheme } from '@mui/material';\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      main: '#181818',\n    },\n    info: {\n      main: '#fff',\n    },\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@mui/material';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\nimport { theme } from './theme';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  rootElement,\n);\n\nreportWebVitals();\n"],"sourceRoot":""}